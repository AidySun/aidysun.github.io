<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Swift on 番茄🍅杂货铺</title>
    <link>https://aidysun.github.io/tags/swift/</link>
    <description>Recent content in Swift on 番茄🍅杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://aidysun.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift String Substring</title>
      <link>https://aidysun.github.io/posts/2023/04/swift-substring/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aidysun.github.io/posts/2023/04/swift-substring/</guid>
      <description>Swift 中对 String 类型的 substring() 方法都被标记为不推荐(deprecated)了，那该如何实现 substring 的功能呢？ 根据Xcode的提示可以使用slicing（切片）的</description>
      <content:encoded><![CDATA[<p>Swift 中对 <code>String</code> 类型的 <code>substring()</code> 方法都被标记为<code>不推荐(deprecated)</code>了，那该如何实现 substring 的功能呢？</p>
<p><img loading="lazy" src="/images/swift-string-substring-deprecated.jpg" alt="substring is deprecated"  title="XCode 中对String.substring的提示"  /></p>
<p>根据Xcode的提示<strong>可以使用<code>slicing（切片）</code>的方式来实现<code>substring</code>的功能</strong>：</p>
<p>以字符串 <code>let str = &quot;0123456789&quot;</code> 为例:</p>
<h3 id="从开始到第一个等于5的字符之前的子串">从开始到第一个等于<code>5</code>的字符之前的子串：</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="k">if</span> <span class="kd">let</span> <span class="nv">firstFive</span> <span class="p">=</span> <span class="n">str</span><span class="p">.</span><span class="n">firstIndex</span><span class="p">(</span><span class="n">of</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">substr</span> <span class="p">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..&lt;</span><span class="n">firstFive</span><span class="p">]</span> <span class="c1">// substr = 01234</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 或者可以省略开始的index</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nv">substr2</span> <span class="p">=</span> <span class="n">str</span><span class="p">[..&lt;</span><span class="n">firstFive</span><span class="p">]</span> <span class="c1">// substr2 = 01234</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="从开头到第一个等于5的字符">从开头到第一个等于<code>5</code>的字符</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">substr</span> <span class="p">=</span> <span class="n">str</span><span class="p">[...</span><span class="n">firstFive</span><span class="p">]</span> <span class="c1">// substr = 012345</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="从第一个5开始到字符串末尾">从第一个<code>5</code>开始到字符串末尾</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">substr</span> <span class="p">=</span> <span class="n">str</span><span class="p">[</span><span class="n">firstFive</span><span class="p">...]</span> <span class="c1">// 56789</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="前7个字符">前7个字符</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nv">strstr</span> <span class="p">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">..&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="mi">7</span><span class="p">)]</span> <span class="c1">// 0123456</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>String</code>切片后返回的结果类型是 <code>Substring</code>。</p>
<h2 id="struct-substring">struct Substring</h2>
<p><code>Substring</code> 不会为字符串额外分配空间，而是与原始字符串共享存储。</p>
<blockquote>
<p><strong>划重点：</strong> 因为<code>Substring</code>会持有对原始字符存储的引用计数，所以要确保子串的生命周期不长于源字符串的生命周期，以免内存泄漏。</p>
</blockquote>
<hr>
<blockquote>
<p>Ref: <a href="https://swiftunboxed.com/stdlib/substrings">https://swiftunboxed.com/stdlib/substrings</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Swift: beginAnimations(_:context:) was deprecated in iOS 13.0: Use the block-based animation API instead</title>
      <link>https://aidysun.github.io/posts/2023/04/swift-block-based-animation/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aidysun.github.io/posts/2023/04/swift-block-based-animation/</guid>
      <description>Swift / Objective-C block-based animation</description>
      <content:encoded><![CDATA[<p>用 <code>Xcode 14.2</code> 升级一个 <code>Swift</code> 项目时有编译警告️⚠提示 <code>beginAnimations()</code> 在 <code>iOS 13.0</code> 后已经不推荐使用，应该用 <code>block-based animation</code> 代替。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="hl"><span class="lnt">1
</span></span><span class="hl"><span class="lnt">2
</span></span><span class="hl"><span class="lnt">3
</span></span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line hl"><span class="cl"><span class="n">UIView</span><span class="p">.</span><span class="n">beginAnimations</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">context</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// &#39;beginAnimations(_:context:)&#39; was deprecated in iOS 13.0: Use the block-based animation API instead</span>
</span></span><span class="line hl"><span class="cl"><span class="n">UIView</span><span class="p">.</span><span class="n">setAnimationDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span> <span class="c1">// &#39;setAnimationDuration&#39; was deprecated in iOS 13.0: Use the block-based animation API instead</span>
</span></span><span class="line hl"><span class="cl"><span class="n">UIView</span><span class="p">.</span><span class="n">commitAnimations</span><span class="p">()</span> <span class="c1">// &#39;commitAnimations()&#39; was deprecated in iOS 13.0: Use the block-based animation API instead </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">currentOverlay</span> <span class="p">=</span> <span class="n">overlay</span>
</span></span><span class="line"><span class="cl"><span class="n">currentOverlayTarget</span> <span class="p">=</span> <span class="n">overlayTarget</span>
</span></span><span class="line"><span class="cl"><span class="n">currentLoadingText</span> <span class="p">=</span> <span class="n">loadingText</span></span></span></code></pre></td></tr></table>
</div>
</div>
<p>修改为使用 <code>Block-based animation</code> 的代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="n">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentOverlay</span> <span class="p">=</span> <span class="n">overlay</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentOverlayTarget</span> <span class="p">=</span> <span class="n">overlayTarget</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentLoadingText</span> <span class="p">=</span> <span class="n">loadingText</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果用 <code>Objective-C</code> 则修改如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-objc" data-lang="objc"><span class="line"><span class="cl"><span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">                 <span class="nl">animations</span><span class="p">:</span> <span class="o">^</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentOverlay</span> <span class="o">=</span> <span class="n">overlay</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentOverlayTarget</span> <span class="o">=</span> <span class="n">overlayTarget</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentLoadingText</span> <span class="o">=</span> <span class="n">loadingText</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}];</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
