<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2023-06 on 番茄🍅杂货铺</title>
    <link>https://blog.tomatostore.top/tags/2023-06/</link>
    <description>Recent content in 2023-06 on 番茄🍅杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 21 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.tomatostore.top/tags/2023-06/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; template&lt;class&gt; v.s. template&lt;typename&gt;</title>
      <link>https://blog.tomatostore.top/posts/2023/06/cpp-template-parameter-class-vs-typename/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/cpp-template-parameter-class-vs-typename/</guid>
      <description>C&#43;&#43;模板用typename和class有啥区别</description>
      <content:encoded><![CDATA[<p><strong>Q:</strong> <code>C++</code> 模板用 <code>typename</code> 和 <code>class</code> 有啥区别?
<strong>A:</strong> 无论使用 <code>class</code> 还是 <code>typename</code> 声明类型参数，效果都是相同的，选择使用哪个关键字主要取决于个人或团队的偏好。一般来说，较为常见的做法是在声明类模板时使用 class，而在嵌套类型的声明或模板内部使用时则使用 typename。</p>
<hr>
<p>早期的 <code>C++</code> 标准将 <code>class</code> 用作声明类型参数的关键字。为了支持<em>模板内嵌套类型</em>，<code>C++98</code> 标准引入了 <code>typename</code>， 同时为了兼容性，<code>class</code> 作为模板类型声明的关键字继续保留。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// template&lt;class&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// template&lt;typename&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyContainer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// internal usage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// nested type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typename</span> <span class="n">MyContainer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value_type</span> <span class="n">getValue</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Godot 2D Sprite Animation</title>
      <link>https://blog.tomatostore.top/posts/2023/06/godot-2d-sprite-animation/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/godot-2d-sprite-animation/</guid>
      <description>如何在 Godot 中创建 2D Sprite 动画</description>
      <content:encoded><![CDATA[<p>官方文档 <a href="ttps://docs.godotengine.org/en/stable/tutorials/2d/2d_sprite_animation.html">2D Sprite Animation</a> 介绍了 3 种实现 2D Sprite 动画的方法。</p>
<p>第一种方法适用于<strong>每一帧的动画是单独图片</strong>的情况。后两种方式适用于<strong>多个动画帧在一张图片内</strong>的情况。</p>
<h2 id="animatedsprite2d单独的图像帧"><code>AnimatedSprite2D</code>+单独的图像帧</h2>
<p>这种方式适用于将动画拆分为单独的图像帧（frame）的情况。
需要将每个动画帧作为单独的图像导入到 Godot 中，并使用 <code>AnimatedSprite2D</code> 节点来创建动画。通过在 <code>SpriteFrames</code> 面板中设置帧速率和添加动画帧，可以控制动画的播放。</p>
<ol>
<li>点击 <code>AnimatedSprite2D</code> 的 <code>SpriteFrames</code> 属性，选择 <code>New SpriteFrames</code>.

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_new_spriteframes.webp" alt="AnimatedSprite2D - SpriteFrames - New SpriteFrames"  /></li>
<li>拖拽单个帧的图片到 <code>SpriteFrames</code>

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_spriteframes_done.webp" alt="add-individual-frames-to-spriteFrames"  /></li>
</ol>
<h2 id="animatedsprite2dspritesheet"><code>AnimatedSprite2D</code>+<code>SpriteSheet</code></h2>
<p>这种方式适用于使用精灵表单（sprite sheet）的情况，精灵表单是指将所有动画帧合并到一个图像中。</p>
<ol>
<li>点击 <code>AnimatedSprite2D</code> 的 <code>SpriteFrames</code> 属性，选择 <code>New SpriteFrames</code>.</li>
<li>在 <code>SpriteFrames</code> 面板中选择 <code>Add frames from a Sprite Sheet</code>

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_add_from_spritesheet.webp" alt="add-frames-from-a-sprite-sheet"  /></li>
<li>选择想要导入的精灵表单，在弹出的窗口中输入行与列的数量将图片分成多个帧（frame），用鼠标选择相应的帧导入。

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_spritesheet_select_rows.webp" alt="select-frames"  /></li>
</ol>
<p>到此为止的前两种用 <code>AnimatedSprete2D</code> 实现的动画都可以在代码中使用 <code>play()</code> 和 <code>stop()</code> 来控制。以 <code>GDScropt</code> 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">extends</span> <span class="nx">CharacterBody2D</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">@</span><span class="nx">onready</span> <span class="kd">var</span> <span class="nx">_animated_sprite</span> <span class="o">=</span> <span class="nx">$AnimatedSprite2D</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">func</span> <span class="nx">_process</span><span class="p">(</span><span class="nx">_delta</span><span class="p">)</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">Input</span><span class="p">.</span><span class="nx">is_action_pressed</span><span class="p">(</span><span class="s2">&#34;ui_right&#34;</span><span class="p">)</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">_animated_sprite</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="s2">&#34;run&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">_animated_sprite</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="sprite2danimationplayerspritesheet"><code>Sprite2D</code>+<code>AnimationPlayer</code>+<code>SpriteSheet</code></h2>
<ol>
<li>选中 <code>Sprite2D</code> 节点，拖拽精灵表单到 <code>Texture</code> ，设置相应的 <code>Hframes</code> 和 <code>Vframes</code> 来切分成单个帧。

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_setframes.webp" alt="sprite2d-texture"  /></li>
<li>选中 <code>AnimationPlayer</code> 节点，点击 <code>Animation</code> 按钮，接着点 <code>New</code>，输入名字，设置动画时长和循环。

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_new_animation.webp" alt="animation-setting"  /></li>
<li>在 <code>Animation</code> 的时间轴上选择插入点，在 <code>Sprite2D</code> 的 <code>Frame</code> 属性设置中选择对应的帧，点 <code>key</code> （钥匙）图标，将相应的帧插入时间轴。对其余帧重复操作。

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_new_track.webp" alt="click-key-to-add-frame"  />

  <img loading="lazy" src="https://docs.godotengine.org/en/stable/_images/2d_animation_full_animation.webp" alt="multi-frames-in-animation"  /></li>
</ol>
<p>对 <code>AnimationPlayer</code> 也可用通过代码控制动画。比如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">extends</span> <span class="nx">CharacterBody2D</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">@</span><span class="nx">onready</span> <span class="kd">var</span> <span class="nx">_animation_player</span> <span class="o">=</span> <span class="nx">$AnimationPlayer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">func</span> <span class="nx">_process</span><span class="p">(</span><span class="nx">_delta</span><span class="p">)</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">Input</span><span class="p">.</span><span class="nx">is_action_pressed</span><span class="p">(</span><span class="s2">&#34;ui_right&#34;</span><span class="p">)</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">_animation_player</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="s2">&#34;walk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">_animation_player</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>本文只是概述，详情参看<a href="https://docs.godotengine.org/en/stable/tutorials/2d/2d_sprite_animation.html">原文</a>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何选择正确的日志级别（log level）</title>
      <link>https://blog.tomatostore.top/posts/2023/06/loglevel-introduction/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/loglevel-introduction/</guid>
      <description>Log Level Introduction</description>
      <content:encoded><![CDATA[<h2 id="日志级别的历史">日志级别的历史：</h2>
<p><code>日志级别（log level）</code>起源于 20 世纪 80 年代的由 <code>Eric Allman</code> 开发的项目 <code>Sendmail</code> 。该项目需要一种日志记录解决方案，这最终导致了 <code>System Logging Protocol（Syslog）</code> 的创建以及不同日志级别的概念。后来 <code>Syslog</code> 被广泛应用于各种应用程序，并成为系统日志和事件消息的标准协议。</p>
<h2 id="日志级别">日志级别</h2>
<p>按重要性递减排列：</p>
<ul>
<li>OFF：不记录任何日志信息。</li>
<li>FATAL：表示应用程序即将发生严重问题或数据损坏，意味着应用程序处于灾难性状态，重要功能无法正常工作。</li>
<li>ERROR：表示无法访问服务或文件等重要故障，应用程序可能继续运行，但需要及时处理。</li>
<li>WARN：表示检测到意外问题，可能会影响特定进程的运行，但不会对应用程序造成损害。</li>
<li>INFO：记录应用程序的正常行为，如服务启动或停止、数据库添加等，通常不需要跟进处理。</li>
<li>DEBUG：提供详细的诊断信息，用于故障诊断、排查或测试应用程序。</li>
<li>TRACE：捕获应用程序行为的详细信息，比DEBUG级别更细粒度，用于查看代码中的参数或解释算法的步骤。</li>
<li>ALL：记录所有定义的日志级别，包括自定义日志级别，相当于综合所有级别的日志。</li>
</ul>
<h2 id="常用日志库">常用日志库</h2>
<table>
<thead>
<tr>
<th>编程语言</th>
<th>日志库</th>
</tr>
</thead>
<tbody>
<tr>
<td>C++</td>
<td><a href="https://github.com/gabime/spdlog">spdlog</a>, <a href="https://www.boost.org/doc/libs/1_75_0/libs/log/doc/html/index.html">Boost.Log</a></td>
</tr>
<tr>
<td>Java</td>
<td><a href="https://logging.apache.org/log4j/2.x/">Log4j</a>, <a href="http://www.slf4j.org/">Slf4j</a></td>
</tr>
<tr>
<td>Python</td>
<td><a href="https://docs.python.org/3/library/logging.html">Python logging</a>, <a href="https://github.com/Delgan/loguru">Loguru</a></td>
</tr>
<tr>
<td>JavaScript</td>
<td><a href="https://github.com/winstonjs/winston">Winston</a>, <a href="https://github.com/trentm/node-bunyan">Bunyan</a></td>
</tr>
<tr>
<td>C#</td>
<td><a href="https://nlog-project.org/">NLog</a>, <a href="https://serilog.net/">Serilog</a></td>
</tr>
<tr>
<td>Go</td>
<td><a href="https://github.com/sirupsen/logrus">logrus</a>, <a href="https://github.com/uber-go/zap">zap</a></td>
</tr>
<tr>
<td>Ruby</td>
<td><a href="https://github.com/colbygk/log4r">Log4r</a>, <a href="https://ruby-doc.org/stdlib-3.0.2/libdoc/logger/rdoc/Logger.html">Logger</a></td>
</tr>
<tr>
<td>PHP</td>
<td><a href="https://github.com/Seldaek/monolog">Monolog</a>, <a href="https://laravel.com/docs/8.x/logging">Laravel Log</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>VSCode: Markdown 预览支持 PlantUML</title>
      <link>https://blog.tomatostore.top/posts/2023/06/vscode-preview-markdown-with-plantuml/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/vscode-preview-markdown-with-plantuml/</guid>
      <description>Dot Executable: /opt/local/bin/dot</description>
      <content:encoded><![CDATA[<p>想在 VSCode 中预览 PlantUML 格式的文件，可以通过安装 <a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml">PlantUML Extension</a> 来实现。</p>
<p>如果想在 Markdown 文件中嵌入一段 PlantUML 脚本并在 VSCode 中预览，可以安装 <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enahnced</a>.</p>
<p><img loading="lazy" src="/images/vscode-preview-plantuml-in-markdown.png" alt="Preview PlantUML in Markdown"  /></p>
<p>在 Linux 的 VSCode 中，如果在 Preview 的时候 PlantUML 图出不来并有如下错误：</p>
<pre tabindex="0"><code>Dot Executable: /opt/local/bin/dot
File does not exist
Cannot find Graphviz. You should try
 
@startuml
testdot
@enduml
 
or
 
java -jar plantuml.jar -testdot
</code></pre><p>可以执行 <code>sudo apt-get install graphviz</code> 安装 <code>graphviz</code> 来解决。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何用VLC Media Player截取部分视频</title>
      <link>https://blog.tomatostore.top/posts/2023/06/how-to-cut-videos-using-vlc/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/how-to-cut-videos-using-vlc/</guid>
      <description>比如删除视频后半部分、只保留中间想要的部分</description>
      <content:encoded><![CDATA[<p>VLC Media Player是一款流行的免费媒体播放器，除了播放功能之外，它还可以用于简单的视频编辑。
在本文中，我们将介绍如何使用VLC Media Player截取视频。</p>
<h2 id="步骤">步骤</h2>
<ol>
<li>用 VLC 打开你要编辑的视频，播放到想要截取的开始位置。</li>
<li>并点击菜单栏中的“视图”选项。然后选择“高级控制”以显示高级控制面板。
<img loading="lazy" src="/images/vlc-views-menu.png" alt="VLC View menu"  /></li>
<li>在底部的控制栏上，你会看到一个红色圆圈的“记录”按钮。</li>
<li>点击红色按钮以开始录制。然后点击播放按钮开始播放你的视频。
<img loading="lazy" src="/images/vlc-record-and-play.png" alt="VLC Record and Play"  /></li>
<li>当视频播放到你想要删除的位置时，点击红色录制按钮停止录制，也可以先停止播放，再停止录制。</li>
<li>此时 VLC 已经将录制的视频自动保存，但不会有提示。可以从如下路径找到录制好的视频：</li>
</ol>
<ul>
<li>Windows: <code>C:\Users\&lt;Username&gt;\Videos</code></li>
<li>macOS: <code>/Users/&lt;Username&gt;/Movies</code></li>
<li>Linux: <code>/home/&lt;Username&gt;/Videos</code></li>
</ul>
<p>这种方法实际上是通过录制一个新的视频文件来达到截取视频(cut video)的目的，而不是直接编辑原始视频文件。</p>
<p>如果你需要进行更复杂的视频编辑操作，如剪切、裁剪、合并等，你可能需要考虑使用专业的视频编辑软件，如Adobe Premiere Pro、Final Cut Pro等。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>阿里云域名解析 Github.io</title>
      <link>https://blog.tomatostore.top/posts/2023/06/github-pages-with-customized-domain-alicloud/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2023/06/github-pages-with-customized-domain-alicloud/</guid>
      <description>Github pages 自定义域名</description>
      <content:encoded><![CDATA[<p>Github Page 提供了免费的域名来搭建静态网站，但国内访问速度不是很理想，经过搜索后学习到可以通过自定义域名+国内域名解析来实现国内提速。</p>
<p>本网站是 <code>Github page + Hugo</code>搭建的，默认地址 <code>aidysun.github.io</code>。</p>
<ol>
<li>域名注册</li>
</ol>
<p>在<a href="https://wanwang.aliyun.com/domain/?spm=5176.100251.111252.17.13bb4f15ZkUpEQ">阿里云</a>中注册自己的域名，如果对名字和后缀没有特殊要求的话，价格还是很美丽的。
我选择的 <code>tomatostore.top</code> 3年只需要一百多块钱。</p>
<ol start="2">
<li>域名解析</li>
</ol>
<p>登陆【阿里云】-【域名控制台】-【域名解析】，填写内容参考下图：</p>
<p><img loading="lazy" src="/images/dns-analysis-ali-cloud.png" alt="dns analysis"  /></p>
<ol start="3">
<li>github设置</li>
</ol>
<p>在 github.io 的 repo 设置，选择 pages, 在 Custom Domain 中输入自定义的域名，保存即可。</p>
<p><img loading="lazy" src="/images/github-io-customize-domain-setting.png" alt="github io customize domain setting"  /></p>
<p>**注意⚠**️：这一步保存之后会在 github.io 的根目录下自动添加一个 <code>CNAME</code> 的文件。<code>CNAME</code>的内容就是在 setting 中设置的 Custom domain 的内容。</p>
<p>如果你的网站并不是直接在 github.io 下管理的，比如是通过其他 repo 的action更新到 github.io 的 repo 的。那么需要确保在后面自动更新github.io后也要有这个CNAME文件。</p>
<p>比如我用的是 hugo 在另一个repo中，那我需要在 hugo 的 static 文件夹下新建一个 CNAME 文件，内容为我的custom域名：blog.tomatostore.top。这样在hugo build之后push到github.io的根目录下就会有 CNAME。</p>
<ul>
<li>我的网站：<a href="https://blog.tomatostore.top">https://blog.tomatostore.top</a></li>
<li>github: <a href="https://github.com/AidySun/aidysun.github.io">https://github.com/AidySun/aidysun.github.io</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
