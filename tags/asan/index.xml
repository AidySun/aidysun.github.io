<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ASan on 番茄🍅杂货铺</title>
    <link>https://blog.tomatostore.top/tags/asan/</link>
    <description>Recent content in ASan on 番茄🍅杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.tomatostore.top/tags/asan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to enable AddressSanitizer(ASan) for C&#43;&#43; Project</title>
      <link>https://blog.tomatostore.top/posts/2024/05/how-to-enable-asan-in-cpp-project/</link>
      <pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.tomatostore.top/posts/2024/05/how-to-enable-asan-in-cpp-project/</guid>
      <description>The tool to detect runtime memory leak</description>
      <content:encoded><![CDATA[<p>To integrate AddressSanitizer(ASan) to an existing project, just add the compile option <code>-fsanitize=address</code> and generate debug infor with <code>-g</code> in <code>CMakeLists.txt</code>.</p>
<pre tabindex="0"><code>option(ENABLE_ASAN &#34;enable AddressSanitizer&#34; OFF)

if(ENABLE_ASAN)
    set(CMAKE_CXX_FLAGS &#34;${CMAKE_CXX_FLAGS} -fsanitize=address&#34;)
    set(CMAKE_CXX_FLAGS &#34;-O -g&#34;)
    set(CMAKE_C_FLAGS &#34;-O -g&#34;)
endif()
</code></pre><p>Compile the project:</p>
<pre tabindex="0"><code>mkdir build
cd build
cmake -DENABLE_ASAN=ON ..
cmake --build .
</code></pre><p>After the build, using following command to start the program:</p>
<pre tabindex="0"><code>ASAN_OPTIONS=detect_leaks=1 ./a.out
</code></pre><p>It will print detail info when memory leak occurs.</p>
<pre tabindex="0"><code>=================================================================
==12345==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 40 byte(s) in 1 object(s) allocated from:
    #0 0x7f3d8b4fbb90 in __interceptor_new (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xde90)
    #1 0x4006d6 in createLeak /path/to/your/project/main.cpp:4
    #2 0x4006f8 in main /path/to/your/project/main.cpp:9
    #3 0x7f3d8b0d283f in __libc_start_main (/lib64/libc.so.6+0x2383f)

SUMMARY: AddressSanitizer: 40 byte(s) leaked in 1 allocation(s).
</code></pre>]]></content:encoded>
    </item>
    
  </channel>
</rss>
